% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{simrRUM}
\alias{simrRUM}
\title{Generate data from the rRUM}
\usage{
simrRUM(Q, rstar, pistar, alpha)
}
\arguments{
\item{Q}{A \code{matrix} with J rows and K columns indicating which attributes are required to answer each of the items, where J represents the number of items and K the number of attributes.  An entry of 1 indicates attribute k is required to answer item j.  An entry of one indicates attribute k is not required.}

\item{rstar}{A \code{matrix} a matrix with J rows and K columns indicating the penalties for failing to have each of the required attributes, where J represents the number of items and K the number of attributes.  rstar and Q must share the same 0 entries.}

\item{pistar}{A \code{vector} of length J indicating the probabiliies of answering each item correctly for individuals who do not lack any required attribute, where J represents the number of items.}

\item{alpha}{A \code{matrix} with N rows and K columns indicating the subjects attribute acquisition, where N reperesnts the number of individuals and K the number of attributes.  An entry of 1 indicates individual i has attained attribute k.  An entry of 0 indicates the attribute has not been attained.}
}
\value{
Y A \code{matrix} with N rows and J columns indicating the indviduals' responses to each of the items, where J represents the number of items.
}
\description{
Randomly generate response data according to the reduced Reparametrized Unified Model (rRUM).
}
\examples{
###################################
### Generate random data from rRUM
### and recover parameters with
### Gibbs sampler
###################################

set.seed(217)

# Define Simulation Parameters
N <- 1000 # number of individuals
J <- 6 # number of items
K <- 2 # number of attributes

As <- pi_reference(K) # matrix where rows represent attribute classes
pis <- c(.1, .2, .3, .4) # pi
Q <- rbind(c(1,0),
           c(0,1),
           c(1,0),
           c(0,1),
           c(1,1),
           c(1,1))
pistar <- rep(.9, J) # pistar
rstar <- .5 * Q # rstar
alpha <- As[sample(1:(K ^ 2), N, replace = TRUE, pis),]

# Simulate data
Y <- simrRUM(Q, rstar, pistar, alpha)

# Recover simulation parameters with Gibbs Sampler
Gibbs.out <- rRUM_Gibbs(Y, Q)
burnin <- 1:5000 # iterations to be discarded from chain as burnin

rstar.mean <- with(Gibbs.out, apply(RSTAR[,,-burnin], c(1, 2), mean))
pistar.mean <- with(Gibbs.out, apply(PISTAR[,-burnin], 1, mean))
pis.mean <- with(Gibbs.out, apply(PI[,-burnin], 1 ,mean))

}
\references{
Culpepper, S. A. & Hudson, A. (In Press). An improved strategy for Bayesian estimation of the reduced reparameterized unified model. Applied Psychological Measurement.

Hudson, A., Culpepper, S. A., & Douglas, J. (2016, July). Bayesian estimation of the generalized NIDA model with Gibbs sampling. Paper presented at the annual International Meeting of the Psychometric Society, Asheville, North Carolina.
}
\author{
Steven Andrew Culpepper
}
