// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// rmultinomialcpp
double rmultinomialcpp(const arma::rowvec& ps);
RcppExport SEXP _rRUM_rmultinomialcpp(SEXP psSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::rowvec& >::type ps(psSEXP);
    rcpp_result_gen = Rcpp::wrap(rmultinomialcpp(ps));
    return rcpp_result_gen;
END_RCPP
}
// bijectionvectorcpp
arma::vec bijectionvectorcpp(unsigned int K);
RcppExport SEXP _rRUM_bijectionvectorcpp(SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(bijectionvectorcpp(K));
    return rcpp_result_gen;
END_RCPP
}
// rDirichletcpp
arma::vec rDirichletcpp(const arma::vec& deltas);
RcppExport SEXP _rRUM_rDirichletcpp(SEXP deltasSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type deltas(deltasSEXP);
    rcpp_result_gen = Rcpp::wrap(rDirichletcpp(deltas));
    return rcpp_result_gen;
END_RCPP
}
// simrRUMcpp
arma::mat simrRUMcpp(unsigned int N, const arma::mat& Q, const arma::mat& rstar, const arma::vec& pistar, const arma::mat& alpha);
RcppExport SEXP _rRUM_simrRUMcpp(SEXP NSEXP, SEXP QSEXP, SEXP rstarSEXP, SEXP pistarSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type N(NSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Q(QSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type rstar(rstarSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type pistar(pistarSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(simrRUMcpp(N, Q, rstar, pistar, alpha));
    return rcpp_result_gen;
END_RCPP
}
// parm_updatecpp
Rcpp::List parm_updatecpp(unsigned int N, unsigned int J, unsigned int K, unsigned int C, const arma::mat Y, const arma::mat& Q, arma::mat& alpha, arma::cube& X, arma::mat& Smat, arma::mat& Gmat, arma::vec& pi, const arma::vec vv, const arma::vec& delta0, double as, double bs, double ag, double bg);
RcppExport SEXP _rRUM_parm_updatecpp(SEXP NSEXP, SEXP JSEXP, SEXP KSEXP, SEXP CSEXP, SEXP YSEXP, SEXP QSEXP, SEXP alphaSEXP, SEXP XSEXP, SEXP SmatSEXP, SEXP GmatSEXP, SEXP piSEXP, SEXP vvSEXP, SEXP delta0SEXP, SEXP asSEXP, SEXP bsSEXP, SEXP agSEXP, SEXP bgSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type N(NSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type J(JSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type K(KSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type C(CSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Q(QSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Smat(SmatSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Gmat(GmatSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type pi(piSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type vv(vvSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta0(delta0SEXP);
    Rcpp::traits::input_parameter< double >::type as(asSEXP);
    Rcpp::traits::input_parameter< double >::type bs(bsSEXP);
    Rcpp::traits::input_parameter< double >::type ag(agSEXP);
    Rcpp::traits::input_parameter< double >::type bg(bgSEXP);
    rcpp_result_gen = Rcpp::wrap(parm_updatecpp(N, J, K, C, Y, Q, alpha, X, Smat, Gmat, pi, vv, delta0, as, bs, ag, bg));
    return rcpp_result_gen;
END_RCPP
}
// rRUM_Gibbscpp
Rcpp::List rRUM_Gibbscpp(const arma::mat& Y, const arma::mat& Q, const arma::vec& delta0, unsigned int chain_length, double as, double bs, double ag, double bg);
RcppExport SEXP _rRUM_rRUM_Gibbscpp(SEXP YSEXP, SEXP QSEXP, SEXP delta0SEXP, SEXP chain_lengthSEXP, SEXP asSEXP, SEXP bsSEXP, SEXP agSEXP, SEXP bgSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Q(QSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta0(delta0SEXP);
    Rcpp::traits::input_parameter< unsigned int >::type chain_length(chain_lengthSEXP);
    Rcpp::traits::input_parameter< double >::type as(asSEXP);
    Rcpp::traits::input_parameter< double >::type bs(bsSEXP);
    Rcpp::traits::input_parameter< double >::type ag(agSEXP);
    Rcpp::traits::input_parameter< double >::type bg(bgSEXP);
    rcpp_result_gen = Rcpp::wrap(rRUM_Gibbscpp(Y, Q, delta0, chain_length, as, bs, ag, bg));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_rRUM_rmultinomialcpp", (DL_FUNC) &_rRUM_rmultinomialcpp, 1},
    {"_rRUM_bijectionvectorcpp", (DL_FUNC) &_rRUM_bijectionvectorcpp, 1},
    {"_rRUM_rDirichletcpp", (DL_FUNC) &_rRUM_rDirichletcpp, 1},
    {"_rRUM_simrRUMcpp", (DL_FUNC) &_rRUM_simrRUMcpp, 5},
    {"_rRUM_parm_updatecpp", (DL_FUNC) &_rRUM_parm_updatecpp, 17},
    {"_rRUM_rRUM_Gibbscpp", (DL_FUNC) &_rRUM_rRUM_Gibbscpp, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_rRUM(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
